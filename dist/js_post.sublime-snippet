<snippet>
	<content><![CDATA[
var dfd = $.Deferred();

if ( $html.hasClass('csstransforms3d') ) {
	// 慣性スクロールはie10から
	$('[data-inertia]').inertiaScroll({}, '#l-wrap');
}

dfd.resolve();
return dfd.promise();

(function ($) {

  $.fn.inertiaScroll = function (options, parent) {
    var $window = $(window);
    var $body = $('body');
    var $parent = $(parent);
    var $this = this;

    var moveParent = 0; // 親要素のスクロール量
    var moveChild = 0; // 子要素のスクロール量
    var windowOffset = 0; // ウィンドウの今のオフセット
    var rateArray = []; // それぞれの要素の慣性の倍率を格納する
    var marginArray = [];
    var offset = 0.1;
    var DEVICE = 'pc';


    $this.each(function () {

      var dur = $(this).data('dur');
      var margin = $(this).data('margin');

      rateArray.push(dur);
      marginArray.push(margin);
    });

    function floatFormat(number, n) {

      var _pow = Math.pow(10, n);
      return Math.floor(number * _pow) / _pow;

    }

    function smoothScroll() {

      windowOffset = $window.scrollTop();
      moveParent += (windowOffset - moveParent) * 0.1;
      moveChild += (windowOffset * 0.15 - moveChild) * 0.055;

      $parent.css({ transform: 'translate3d(' + 0 + ',' + -moveParent + 'px ,' + 0 + ')' });

      $this.each(function (i) {
        $(this).css({ transform: 'translate3d(' + 0 + ',' + (-moveChild * Number(rateArray[i]) + marginArray[i]) + 'px ,' + 0 + ')' });
      });

      requestAnimationFrame(smoothScroll);

    }

    smoothScroll();

    $parent.css({ 'position': 'fixed' });

  };
})(jQuery);
]]></content>
	<tabTrigger>post</tabTrigger>
	<description></description>
	<scope>source.js</scope>
</snippet>